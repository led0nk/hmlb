---
apiVersion: v1
kind: Namespace
metadata:
  name: observability
  labels:
    gateway.infra.services/allow-routes: "true"
    pod-security.kubernetes.io/audit: privileged
    pod-security.kubernetes.io/enforce: privileged
    pod-security.kubernetes.io/warn: privileged
---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: otel-host-agent
  namespace: observability
spec:
  serviceAccount: otel-hostfs-daemonset
  mode: daemonset
  volumeMounts:
    - mountPath: /hostfs
      name: hostfs
      readOnly: true
  volumes:
    - name: hostfs
      hostPath:
        path: /
        type: Directory
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  config:
    receivers:
      hostmetrics:
        root_path: /hostfs
        resource_to_telemetry_conversion:
          enabled: true
        collection_interval: 30s
        scrapers:
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
              system.cpu.logical.count:
                enabled: true
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
              system.memory.limit:
                enabled: true
          disk: {}
          filesystem: {}
          network: {}
          processes: {}
          process:
            mute_process_user_error: true
            mute_process_exe_error: true
            metrics:
              process.cpu.utilization:
                enabled: true
              process.memory.utilization:
                enabled: true
              process.disk.io:
                enabled: false

      kubeletstats:
        collection_interval: 30s
        auth_type: "serviceAccount"
        endpoint: "https://${env:K8S_NODE_NAME}:10250"
        insecure_skip_verify: true
        node: "${env:K8S_NODE_NAME}"
        k8s_api_config:
          auth_type: serviceAccount
        metrics:
          k8s.node.uptime:
            enabled: true
          k8s.pod.uptime:
            enabled: true
          k8s.pod.cpu.node.utilization:
            enabled: true
          k8s.pod.cpu_limit_utilization:
            enabled: true
          k8s.pod.cpu_request_utilization:
            enabled: true
          k8s.pod.memory.node.utilization:
            enabled: true
          k8s.pod.memory_limit_utilization:
            enabled: true
          k8s.pod.memory_request_utilization:
            enabled: true

    processors:
      resourcedetection/system:
        detectors: ["system"]
        system:
          hostname_sources: ["os"]
      resource:
        attributes:
          - action: upsert
            key: host.name
            value: "${env:K8S_NODE_NAME}"
      transform:
        metric_statements:
          - context: datapoint
            statements:
              - set(attributes["host.name"], resource.attributes["host.name"])
              - set(attributes["process.command"], resource.attributes["process.command"])
              - set(attributes["process.command_line"], resource.attributes["process.command_line"])
              - set(attributes["process.executable.name"], resource.attributes["process.executable.name"])
              - set(attributes["process.executable.path"], resource.attributes["process.executable.path"])
              - set(attributes["process.owner"], resource.attributes["process.owner"])
              - set(attributes["process.parent_pid"], resource.attributes["process.parent_pid"])
              - set(attributes["process.pid"], resource.attributes["process.pid"])
      batch: {}

    exporters:
      otlp:
        endpoint: backend.observability:4317
        tls:
          insecure: true

    service:
      pipelines:
        metrics:
          receivers: [hostmetrics, kubeletstats]
          processors: [resourcedetection/system, resource, transform, batch]
          exporters: [otlp]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-hostfs-daemonset
  namespace: observability
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-kubelet
rules:
  - apiGroups: [""]
    resources: ["nodes", "nodes/stats", "nodes/proxy"]
    verbs: ["get", "watch", "list"]
  # - apiGroups: [""]
  #   resources: ["nodes/proxy"]
  #   verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-kubelet-binding
subjects:
  - kind: ServiceAccount
    name: otel-hostfs-daemonset
    namespace: observability
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-kubelet
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: podmonitor-servicemonitor-lister
rules:
  - apiGroups:
      - ""
    resources:
      - pods
      - nodes
      - nodes/metrics
      - services
      - endpoints
      - namespaces
      - configmaps
    verbs:
      - get
      - watch
      - list
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - watch
      - list
  - nonResourceURLs:
      - /metrics
      - /metrics/cadvisor
    verbs:
      - get
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - servicemonitors
      - podmonitors
      - scrapeconfigs
      - probes
    verbs:
      - "*"
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prom-collector-podmonitor-servicemonitor-lister
subjects:
  - kind: ServiceAccount
    name: prom-collector
    namespace: observability
roleRef:
  kind: ClusterRole
  name: podmonitor-servicemonitor-lister
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prom-collector
subjects:
  - kind: ServiceAccount
    name: prom-collector
    namespace: observability
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-monitoring-view
---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: prom
  namespace: observability
spec:
  managementState: managed
  mode: statefulset
  targetAllocator:
    enabled: true
    serviceAccount: prom-collector
    prometheusCR:
      enabled: true
      podMonitorSelector: {}
      serviceMonitorSelector: {}
  config:
    exporters:
      otlp:
        endpoint: backend.observability:4317
        tls:
          insecure: true

    receivers:
      prometheus:
        config:
          scrape_configs:
            - job_name: "otel-ta-collector"
              scrape_interval: 5s
              static_configs:
                - targets: ["0.0.0.0:8888"]
    service:
      telemetry:
        metrics:
          address: ":8888"
      pipelines:
        metrics:
          receivers: [prometheus]
          exporters: [otlp]
---
#####################
# OTEL-LGTM-STACK
#####################
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: lgtm-observability
  namespace: observability
spec:
  storageClassName: openebs-crucial
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-lgtm
  namespace: observability
  labels:
    app: otel-lgtm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: otel-lgtm
  template:
    metadata:
      labels:
        app: otel-lgtm
    spec:
      containers:
        - name: otel-lgtm
          image: grafana/otel-lgtm:latest
          env:
            - name: ENABLE_LOGS_OTELCOL
              value: "true"
            - name: LGTM_APP_CONFIG_FILE
              value: /etc/lgtm/lgtm-config.yaml
          ports:
            - containerPort: 3000
            - containerPort: 3100
            - containerPort: 4317
            - containerPort: 4318
            - containerPort: 14268
          volumeMounts:
            - name: lgtm-config
              mountPath: /etc/lgtm
              readOnly: true

            - name: dashboard-files
              mountPath: /otel-lgtm/grafana-dashboard-jvm-metrics.json
              subPath: grafana-homelab-opentelemetry.json

      volumes:
        - name: lgtm-config
          configMap:
            name: otel-lgtm-config

        - name: lgtm-storage
          persistentVolumeClaim:
            claimName: lgtm-observability

        - name: dashboard-files
          configMap:
            name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: observability
spec:
  selector:
    app: otel-lgtm
  ports:
    - name: grafana
      protocol: TCP
      port: 3000
      targetPort: 3000
    - name: otel-grpc
      protocol: TCP
      port: 4317
      targetPort: 4317
    - name: otel-http
      protocol: TCP
      port: 4318
      targetPort: 4318
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: otel-lgtm-ingress
  namespace: observability
spec:
  ingressClassName: nginx
  rules:
    - host: grafana.homelab
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: backend
                port:
                  number: 3000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: otel-lgtm-tailscale
  namespace: observability
spec:
  ingressClassName: tailscale
  defaultBackend:
    service:
      name: backend
      port:
        number: 3000
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-lgtm-config
  namespace: observability
data:
  lgtm-config.yaml: |
    server:
      http_listen_port: 3000
    analytics:
      reporting_enabled: false
    common:
      path_prefix: /var/lgtm
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: flux-metrics
  namespace: observability
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app.kubernetes.io/part-of: flux
  namespaceSelector:
    matchNames:
      - flux-system
  endpoints:
    - port: http-metrics
      path: /metrics
      interval: 30s
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: flux-podmonitor
  namespace: observability
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: kustomize-controller
  namespaceSelector:
    matchNames:
      - flux-system
  podMetricsEndpoints:
    - targetPort: 8080
      path: /metrics
---
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: openebs-podmonitor
  namespace: observability
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: io-engine
  namespaceSelector:
    matchNames:
      - openebs
  podMetricsEndpoints:
    - targetPort: 9502
      path: /metrics
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: observability
  namespace: observability
  # labels:
  #   external-dns: "true"
spec:
  parentRefs:
    - name: services
      namespace: infra
      sectionName: main
  hostnames: ["observability.kndlive.com"]
  rules:
    - backendRefs:
        - group: ""
          kind: Service
          name: backend
          port: 3000
---
